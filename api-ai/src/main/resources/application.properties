spring.application.name=spring-ai-api

logging.level.org.springframework.ai=debug

spring.ai.openai.api-key=${OPENAI_API_KEY}

# =============================================
# PostgreSQL Configuration
# =============================================
spring.datasource.url=jdbc:postgresql://localhost:5432/mydatabase
spring.datasource.username=myuser
spring.datasource.password=secret
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# =============================================
# Vector Store Configuration (pgvector)
# =============================================
# Initialize schema - set to false to prevent dropping tables on restart
spring.ai.vectorstore.pgvector.initialize-schema=false
# OpenAI text-embedding-3-small uses 1536 dimensions
spring.ai.vectorstore.pgvector.dimensions=1536
# Use cosine distance for similarity search
spring.ai.vectorstore.pgvector.distance-type=COSINE_DISTANCE
# HNSW index for better performance (already created in pgvector.sql)
spring.ai.vectorstore.pgvector.index-type=HNSW
# Remove existing vector store table on startup (false for persistence)
spring.ai.vectorstore.pgvector.remove-existing-vector-store-table=false

# =============================================
# OpenAI Embeddings Configuration
# =============================================
# Use text-embedding-3-small model (cost-effective, good performance)
spring.ai.openai.embedding.options.model=text-embedding-3-small
# Embedding dimensions must match vector store configuration
spring.ai.openai.embedding.options.dimensions=1536

# =============================================
# File Upload Configuration
# =============================================
# Maximum file size for upload (10MB)
spring.servlet.multipart.max-file-size=10MB
# Maximum request size (10MB)
spring.servlet.multipart.max-request-size=10MB
# Enable multipart file uploads
spring.servlet.multipart.enabled=true
# Temporary directory for file uploads
spring.servlet.multipart.location=${java.io.tmpdir}

# =============================================
# RAG Document Storage Configuration
# =============================================
# Directory to store uploaded documents
app.documents.upload-dir=./documents
# Maximum chunk size for text splitting (in tokens)
app.documents.chunk-size=800
# Minimum chunk size (in characters)
app.documents.min-chunk-size=350
# Chunk overlap for continuity (in tokens)
app.documents.chunk-overlap=50
# Number of similar chunks to retrieve for RAG queries
app.documents.top-k=5

#spring.ai.chat.memory.repository.jdbc.initialize-schema=always
#spring.ai.chat.memory.repository.jdbc.schema=classpath:/custom/path/schema-mysql.sql

# Initialize schema using schema.sql
#spring.sql.init.mode=always